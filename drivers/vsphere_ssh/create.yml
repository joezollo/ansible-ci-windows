---
- name: Create vCenter Instances
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log | default(false) | bool) }}"
  tasks:
  - name: Build CI Instance
    vmware_guest:
      hostname: "{{ molecule_yml.driver.hostname }}"
      username: "{{ molecule_yml.driver.username }}"
      password: "{{ molecule_yml.driver.password }}"
      validate_certs: "{{ molecule_yml.driver.validate_certs | default(false) }}"
      datacenter: "{{ molecule_yml.driver.datacenter }}"
      folder: "{{ molecule_yml.driver.folder }}"
      name: "{{ item.name[0:10] }}"
      cluster: "{{ item.cluster }}"
      template: "{{ item.template }}"
      linked_clone: true
      snapshot_src: "{{ item.snapshot_src }}"
      hardware:
        memory_mb: "{{ item.memory_mb }}"
        num_cpus: "{{ item.cpus }}"
      networks: "{{ item.network }}"
      datastore: "{{ item.datastore }}"
      customization:
        hostname: "{{ item.name[0:10] }}"
        fullname: Molecule Test
        orgname: Globex
        password: "{{ molecule_yml.driver.vm_password }}"
      wait_for_ip_address: true
      wait_for_customization: true
      state: poweredon
    register: server
    loop: "{{ molecule_yml.platforms }}"

  - name: Populate CI Instance Config
    set_fact:
      instance_conf_dict: {
        'instance': "{{ item.item.name }}",
        'address': "{{ item.instance.ipv4 }}",
        'uuid': "{{ item.instance.hw_product_uuid }}",
        'port': "{{ molecule_yml.driver.port }}",
        'connection': "{{ molecule_yml.driver.connection }}",
        'shell_type': "{{ molecule_yml.driver.shell_type }}",
        'become_method': "{{ molecule_yml.driver.become_method }}",
        'become_user': "{{ molecule_yml.driver.become_user }}",
        'user': "{{ molecule_yml.driver.vm_username }}",
        'fake_instance_uuid': "{{ item.instance.ipv4 }}",
        'password': "{{ molecule_yml.driver.vm_password }}"
      }
    loop: "{{ server.results }}"
    register: instance_config_dict
    when: server is changed

  - name: Map CI Instance Config to Dict
    set_fact:
      instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
    when: server is changed

  - name: Copy Instance Config
    copy:
      content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
      dest: "{{ molecule_instance_config }}"
    when: server is changed

  - debug:
      var: molecule_instance_config
    ignore_errors: true

  - name: Wait for SSH
    wait_for:
      host: "{{ item.instance.ipv4 }}"
      port: "{{ molecule_yml.driver.port }}"
      delay: 10
      timeout: 600
    delegate_to: localhost
    loop: "{{ server.results }}"